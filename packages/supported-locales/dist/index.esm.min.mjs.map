{"version":3,"file":"index.esm.min.mjs","sources":["../src/supportedLocales.ts","../src/index.ts"],"sourcesContent":["const supportedLocales = {\n    \"af\": [\"af\"], // Afrikaans\n    \"am\": [\"am\"], // Amharic\n    \"ar\": [ // Arabic\n        \"ar-AE\", // United Arab Emirates\n        \"ar-EG\", // Egypt\n        \"ar-LB\", // Lebanon\n        \"ar-MA\", // Morocco\n        \"ar-SA\" // Saudi Arabia\n    ],\n    \"bg\": [\"bg\"], // Bulgarian\n    \"bn\": [ // Bengali\n        \"bn-BD\", // Bangladesh\n        \"bn-IN\" // India\n    ],\n    \"bs\": [\"bs\"], // Bosnian\n    \"ca\": [\"ca\"], // Catalan\n    \"cs\": [\"cs\"], // Czech\n    \"cy\": [\"cy\"], // Welsh\n    \"da\": [\"da\"], // Danish\n    \"de\": [ // German\n        \"de\",\n        \"de-AT\", // Austria\n        \"de-CH\", // Switzerland\n    ],\n    \"el\": [ // Greek\n        \"el\",\n        \"el-CY\", // Cyprus\n    ],\n    \"en\": [ // English\n        \"en-AU\", // Australia\n        \"en-CA\", // Canada\n        \"en-GB\", // United Kingdom\n        \"en-NZ\", // New Zealand\n        \"en-US\", // United States\n    ],\n    \"es\": [ // Spanish\n        \"es\", // Spain\n        \"es-419\", // Latin America\n        \"es-AR\", // Argentina\n        \"es-CL\", // Chile\n        \"es-CO\", // Colombia\n        \"es-MX\", // Mexico\n        \"es-PE\", // Peru\n        \"es-US\", // United States\n        \"es-VE\", // Venezuela\n    ],\n    \"et\": [\"et\"], // Estonian\n    \"fa\": [\"fa\"], // Persian\n    \"fi\": [\"fi\"], // Finnish\n    \"fil\": [\"fil\"], // Filipino\n    \"fr\": [ // French\n        \"fr\", // France\n        \"fr-BE\", // Belgium\n        \"fr-CM\", // Cameroon\n        \"fr-CA\", // Canada\n        \"fr-CH\", // Switzerland\n        \"fr-SN\", // Senegal\n    ],\n    \"gu\": [\"gu\"], // Gujarati\n    \"hi\": [\"hi\"], // Hindi\n    \"he\": [\"he\"], // Hebrew\n    \"hr\": [\"hr\"], // Croatian\n    \"hu\": [\"hu\"], // Hungarian\n    \"hy\": [\"hy\"], // Armenian\n    \"id\": [\"id\"], // Indonesian\n    \"is\": [\"is\"], // Icelandic\n    \"it\": [ // Italian\n        \"it-CH\", // Switzerland\n        \"it-IT\", // Italy\n    ],\n    \"ja\": [\"ja\"], // Japanese\n    \"ka\": [\"ka\"], // Georgian\n    \"kk\": [\"kk\"], // Kazakh\n    \"kn\": [\"kn\"], // Kannada\n    \"ko\": [\"ko\"], // Korean\n    \"la\": [\"la\"], // Latin\n    \"lt\": [\"lt\"], // Lithuanian\n    \"lv\": [\"lv\"], // Latvian\n    \"mk\": [\"mk\"], // Macedonian\n    \"ml\": [\"ml\"], // Malayalam\n    \"mn\": [\"mn\"], // Mongolian\n    \"mr\": [\"mr\"], // Marathi\n    \"ms\": [\"ms\"], // Malay\n    \"my\": [\"my\"], // Burmese\n    \"nl\": [ // Dutch\n        \"nl\", // Netherlands\n        \"nl-BE\", // Belgium\n    ],\n    \"no\": [\"no\"], // Norwegian\n    \"pa\": [\"pa\"], // Punjabi\n    \"pl\": [\"pl\"], // Polish\n    \"pt\": [ // Portuguese\n        \"pt-BR\", // Brazil\n        \"pt-PT\", // Portugal\n    ],\n    \"ro\": [\"ro\"], // Romanian\n    \"ru\": [\"ru\"], // Russian\n    \"sk\": [\"sk\"], // Slovak\n    \"sl\": [\"sl\"], // Slovenian\n    \"so\": [\"so\"], // Somali\n    \"sq\": [\"sq\"], // Albanian\n    \"sr\": [\"sr\"], // Serbian\n    \"sv\": [\"sv\"], // Swedish\n    \"sw\": [ // Swahili\n        \"sw-KE\", // Kenya\n        \"sw-TZ\", // Tanzania\n    ],\n    \"ta\": [\"ta\"], // Tamil\n    \"te\": [\"te\"], // Telugu\n    \"th\": [\"th\"], // Thai\n    \"tl\": [\"tl\"], // Tagalog\n    \"tr\": [\"tr\"], // Turkish\n    \"uk\": [\"uk\"], // Ukrainian\n    \"ur\": [\"ur\"], // Urdu\n    \"vi\": [\"vi\"], // Vietnamese\n    \"zh\": [ // Chinese\n        \"zh\", // China\n        \"zh-HK\", // Hong Kong\n        \"zh-SG\", // Singapore\n        \"zh-TW\", // Taiwan\n    ]\n} as {\n    [language: string]: string[]\n};\n\nexport default supportedLocales;","\nimport supportedLocales from \"./supportedLocales\";\nimport { getLocaleProperties, isValidLocale, standardizeLocale } from \"generaltranslation\";\n\n/**\n * @function getSupportedLocale\n * @description\n * Takes an arbitrary locale string, validates and standardizes it, and then attempts to map it \n * to a supported locale code based on a predefined list of locales. If the exact locale is supported, \n * it returns that locale directly. Otherwise, it attempts to find a compatible fallback by:\n *   1. Checking if the language portion is supported.\n *   2. Checking if a minimized form (e.g. \"en\" for \"en-US\") is supported.\n * If no supported match is found, it returns null.\n * \n * @param {string} locale - The locale string to check (e.g., \"en-Latn-US\").\n * @returns {string | null} A valid supported locale code if matched, otherwise null.\n */\nexport function getSupportedLocale(locale: string): string | null {\n    \n    // Validate and standardize\n    if (!isValidLocale(locale)) return null;\n    locale = standardizeLocale(locale);\n\n    // Check if there's support for the general language code\n    const { \n        languageCode, \n        minimizedCode, maximizedCode,\n        regionCode, scriptCode\n    } = getLocaleProperties(locale);\n    if (supportedLocales[languageCode]) {\n        const exactSupportedLocales = supportedLocales[languageCode];\n\n        // If the full locale is supported under this language category\n        if (exactSupportedLocales.includes(locale)) return locale;\n\n        // If a minimized variant of this locale is supported\n        if (exactSupportedLocales.includes(minimizedCode)) return minimizedCode;\n\n        // If only the language code is supported\n        if (exactSupportedLocales.includes(languageCode)) return languageCode;\n\n        // Attempt to match parts\n        const parts = maximizedCode.split('-');\n        if (parts.length > 2) {\n            const languageWithRegion = `${languageCode}-${regionCode}`;\n            if (exactSupportedLocales.includes(languageWithRegion)) return languageWithRegion;\n            const languageWithScript = `${languageCode}-${scriptCode}`;\n            if (exactSupportedLocales.includes(languageWithScript)) return languageWithScript;\n        }\n    }\n\n    // No match found; return null\n    return null;\n}\n\n/**\n * Generates a sorted list of supported locales.\n * @returns {string[]} A sorted array containing the supported base languages and their specific locales.\n */\nexport function listSupportedLocales(): string[] {\n    const list: string[] = [];\n    for (const localeList of Object.values(supportedLocales)) {\n        list.push(...localeList); // Add each locale in the list\n    }\n    return list.sort();\n}"],"names":["supportedLocales","af","am","ar","bg","bn","bs","ca","cs","cy","da","de","el","en","es","et","fa","fi","fil","fr","gu","hi","he","hr","hu","hy","id","is","it","ja","ka","kk","kn","ko","la","lt","lv","mk","ml","mn","mr","ms","my","nl","no","pa","pl","pt","ro","ru","sk","sl","so","sq","sr","sv","sw","ta","te","th","tl","tr","uk","ur","vi","zh","getSupportedLocale","locale","isValidLocale","standardizeLocale","_a","getLocaleProperties","languageCode","minimizedCode","maximizedCode","regionCode","scriptCode","exactSupportedLocales","includes","split","length","languageWithRegion","concat","languageWithScript","listSupportedLocales","list","_i","Object","values","localeList","push","apply","sort"],"mappings":"mGAAA,IAAMA,EAAmB,CACrBC,GAAM,CAAC,MACPC,GAAM,CAAC,MACPC,GAAM,CACF,QACA,QACA,QACA,QACA,SAEJC,GAAM,CAAC,MACPC,GAAM,CACF,QACA,SAEJC,GAAM,CAAC,MACPC,GAAM,CAAC,MACPC,GAAM,CAAC,MACPC,GAAM,CAAC,MACPC,GAAM,CAAC,MACPC,GAAM,CACF,KACA,QACA,SAEJC,GAAM,CACF,KACA,SAEJC,GAAM,CACF,QACA,QACA,QACA,QACA,SAEJC,GAAM,CACF,KACA,SACA,QACA,QACA,QACA,QACA,QACA,QACA,SAEJC,GAAM,CAAC,MACPC,GAAM,CAAC,MACPC,GAAM,CAAC,MACPC,IAAO,CAAC,OACRC,GAAM,CACF,KACA,QACA,QACA,QACA,QACA,SAEJC,GAAM,CAAC,MACPC,GAAM,CAAC,MACPC,GAAM,CAAC,MACPC,GAAM,CAAC,MACPC,GAAM,CAAC,MACPC,GAAM,CAAC,MACPC,GAAM,CAAC,MACPC,GAAM,CAAC,MACPC,GAAM,CACF,QACA,SAEJC,GAAM,CAAC,MACPC,GAAM,CAAC,MACPC,GAAM,CAAC,MACPC,GAAM,CAAC,MACPC,GAAM,CAAC,MACPC,GAAM,CAAC,MACPC,GAAM,CAAC,MACPC,GAAM,CAAC,MACPC,GAAM,CAAC,MACPC,GAAM,CAAC,MACPC,GAAM,CAAC,MACPC,GAAM,CAAC,MACPC,GAAM,CAAC,MACPC,GAAM,CAAC,MACPC,GAAM,CACF,KACA,SAEJC,GAAM,CAAC,MACPC,GAAM,CAAC,MACPC,GAAM,CAAC,MACPC,GAAM,CACF,QACA,SAEJC,GAAM,CAAC,MACPC,GAAM,CAAC,MACPC,GAAM,CAAC,MACPC,GAAM,CAAC,MACPC,GAAM,CAAC,MACPC,GAAM,CAAC,MACPC,GAAM,CAAC,MACPC,GAAM,CAAC,MACPC,GAAM,CACF,QACA,SAEJC,GAAM,CAAC,MACPC,GAAM,CAAC,MACPC,GAAM,CAAC,MACPC,GAAM,CAAC,MACPC,GAAM,CAAC,MACPC,GAAM,CAAC,MACPC,GAAM,CAAC,MACPC,GAAM,CAAC,MACPC,GAAM,CACF,KACA,QACA,QACA,UCvGF,SAAUC,EAAmBC,GAG/B,IAAKC,EAAcD,GAAS,OAAO,KACnCA,EAASE,EAAkBF,GAGrB,IAAAG,EAIFC,EAAoBJ,GAHpBK,iBACAC,kBAAeC,kBACfC,eAAYC,eAEhB,GAAI5E,EAAiBwE,GAAe,CAChC,IAAMK,EAAwB7E,EAAiBwE,GAG/C,GAAIK,EAAsBC,SAASX,GAAS,OAAOA,EAGnD,GAAIU,EAAsBC,SAASL,GAAgB,OAAOA,EAG1D,GAAII,EAAsBC,SAASN,GAAe,OAAOA,EAIzD,GADcE,EAAcK,MAAM,KACxBC,OAAS,EAAG,CAClB,IAAMC,EAAqB,GAAAC,OAAGV,EAAgB,KAAAU,OAAAP,GAC9C,GAAIE,EAAsBC,SAASG,GAAqB,OAAOA,EAC/D,IAAME,EAAqB,GAAAD,OAAGV,EAAgB,KAAAU,OAAAN,GAC9C,GAAIC,EAAsBC,SAASK,GAAqB,OAAOA,GAKvE,OAAO,IACX,UAMgBC,IAEZ,IADA,IAAMC,EAAiB,GACiCC,EAAA,EAA/BhB,EAAAiB,OAAOC,OAAOxF,GAAdsF,EAAAhB,EAAAU,OAAAM,IAAiC,CAArD,IAAMG,EAAUnB,EAAAgB,GACjBD,EAAKK,KAALC,MAAAN,EAAaI,GAEjB,OAAOJ,EAAKO,MAChB"}